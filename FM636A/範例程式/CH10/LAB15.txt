 1    from machine import Pin, ADC, SoftI2C
 2    from utime import ticks_ms, ticks_diff
 3    from max30102 import MAX30102
 4    from pulse_oximeter import Pulse_oximeter, IIR_filter
 5    
 6    
 7    led = Pin(5, Pin.OUT)
 8    
 9    adc_pin = Pin(36)          # 36是ESP32的VP腳位
10    adc = ADC(adc_pin)         # 設定36為輸入腳位          
11    adc.width(ADC.WIDTH_10BIT) # 設定解析度位元數
12    adc.atten(ADC.ATTN_11DB)   # 設定最大電壓
13    
14    my_SCL_pin = 25         # I2C SCL 腳位
15    my_SDA_pin = 26         # I2C SDA 腳位
16    
17    i2c = SoftI2C(sda=Pin(my_SDA_pin),
18                  scl=Pin(my_SCL_pin))
19    
20    sensor = MAX30102(i2c=i2c)
21    sensor.setup_sensor()
22    
23    pox = Pulse_oximeter(sensor)
24    
25    thresh_gen_pulse = IIR_filter(0.9) # 用於產生PPG的動態閾值
26    thresh_gen_heart = IIR_filter(0.9) # 用於產生ECG的動態閾值
27    dc_extractor = IIR_filter(0.99)    # 用於提取直流成份
28    
29    detected_heart_beat = False
30    pulse_is_beating = False
31    heart_is_beating = False
32    pulse_time_mark = ticks_ms()
33    heart_time_mark = ticks_ms()
34    max_ecg = 0
35    
36    while True:
37        ecg_raw = adc.read()
38        if ecg_raw > max_ecg:
39            max_ecg = ecg_raw
40        
41        pox.update()
42        
43        if pox.available():
44            ecg = max_ecg
45            thresh_heart = thresh_gen_heart.step(ecg)
46            
47            red_val = pox.get_raw_red()
48            red_dc = dc_extractor.step(red_val)
49            ppg = int(red_dc*1.01 - red_val)
50            thresh_pulse = thresh_gen_pulse.step(ppg)
51    
52            #---------------偵測心跳開始---------------#
53            if (ecg > (thresh_heart + 100) and not 
54            heart_is_beating):
55                print("heart beat!")
56                detected_heart_beat = True
57                heart_is_beating = True
58                heart_time_mark = ticks_ms()
59            elif ecg < thresh_heart:
60                heart_is_beating = False
61            #---------------偵測心跳結束---------------#
62            
63            #---------------偵測脈搏開始---------------#
64            if (ppg > (thresh_pulse + 20) and not 
65            pulse_is_beating):
66                led.value(1)
67                print("pulse beat!")
68                pulse_is_beating = True
69                pulse_time_mark = ticks_ms()
70                
71                if detected_heart_beat:
72                    pwtt = ticks_diff(pulse_time_mark, 
73                    heart_time_mark)
74                    print("pwtt =", pwtt)
75                    detected_heart_beat = False
76                
77            elif ppg < thresh_pulse:
78                led.value(0)
79                pulse_is_beating = False
80            #---------------偵測脈搏結束---------------#
81            max_ecg = 0