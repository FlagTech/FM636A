  1    import network, ESPWebServer
  2    from machine import Pin, ADC, SoftI2C
  3    from utime import ticks_ms, ticks_diff
  4    from max30102 import MAX30102
  5    from pulse_oximeter import Pulse_oximeter, IIR_filter
  6    from keras_lite import Model  # 從 keras_lite 模組匯入 Model
  7    import ulab as np             # 匯入 ulab 模組並命名為 np
  8    
  9    
 10    model = Model('bp_model.json')     # 建立模型物件
 11    
 12    led = Pin(5, Pin.OUT)
 13    
 14    adc_pin = Pin(36)          # 36是ESP32的VP腳位
 15    adc = ADC(adc_pin)         # 設定36為輸入腳位          
 16    adc.width(ADC.WIDTH_10BIT) # 設定解析度位元數
 17    adc.atten(ADC.ATTN_11DB)   # 設定最大電壓
 18    
 19    my_SCL_pin = 25            # I2C SCL 腳位
 20    my_SDA_pin = 26            # I2C SDA 腳位
 21    
 22    i2c = SoftI2C(sda=Pin(my_SDA_pin),
 23                  scl=Pin(my_SCL_pin))
 24    
 25    sensor = MAX30102(i2c=i2c)
 26    sensor.setup_sensor()
 27    
 28    pox = Pulse_oximeter(sensor)
 29    
 30    thresh_gen_pulse = IIR_filter(0.9) # 用於產生PPG的動態閾值
 31    thresh_gen_heart = IIR_filter(0.9) # 用於產生ECG的動態閾值
 32    dc_extractor = IIR_filter(0.99)    # 用於提取直流成份
 33    
 34    detected_heart_beat = False
 35    pulse_is_beating = False
 36    heart_is_beating = False
 37    pulse_time_mark = ticks_ms()
 38    heart_time_mark = ticks_ms()
 39    max_ecg = 0
 40    hr_rate = 0
 41    num_beats = 0
 42    tot_intval = 0
 43    bp = 0
 44    
 45    def cal_hr_rate(intval, target_n_beats=3):
 46        intval /= 1000
 47        hr_rate = target_n_beats/(intval/60)
 48        hr_rate = round(hr_rate, 1)
 49        return hr_rate
 50    
 51    def cal_bp(pwtt):
 52        pwtt /= 200
 53        pwtt = np.array([pwtt])
 54        bloop_pressure = model.predict(pwtt)     # 得出預測值
 55        bloop_pressure = round(
 56        bloop_pressure[0]*100, 1)    # 將預測值×100
 57        return bloop_pressure
 58    
 59    def SendHrRate(socket, args):    # 處理 /hr 指令的函式
 60        ESPWebServer.ok(socket, "200", str(heart_rate))
 61        
 62    def SendBP(socket, args):        # 處理 /line 指令的函式
 63        ESPWebServer.ok(socket, "200", str(bp))
 64        
 65    def web_thread():
 66        while True:
 67            ESPWebServer.handleClient()
 68    
 69    print("連接中...")
 70    sta = network.WLAN(network.STA_IF)
 71    sta.active(True)
 72    sta.connect("無線網路名稱", "無線網路密碼")
 73    
 74    while not sta.isconnected():
 75        pass
 76    
 77    print("已連接, ip為:", sta.ifconfig()[0])
 78    
 79    ESPWebServer.begin(80)                   
 80    ESPWebServer.onPath("/hr", SendHrRate)  
 81    ESPWebServer.onPath("/bp", SendBP)  
 82    
 83    _thread.start_new_thread(web_thread, ()) # 啟動子執行緒
 84    
 85    while True:
 86        ecg_raw = adc.read()
 87        if ecg_raw > max_ecg:
 88            max_ecg = ecg_raw
 89        
 90        pox.update()
 91        
 92        if pox.available():
 93            ecg = max_ecg
 94            thresh_heart = thresh_gen_heart.step(ecg)
 95            
 96            red_val = pox.get_raw_red()
 97            red_dc = dc_extractor.step(red_val)
 98            ppg = red_dc*1.01 - red_val
 99            thresh_pulse = thresh_gen_pulse.step(ppg)
100    
101            #---------------偵測心跳開始---------------#
102            if (ecg > (thresh_heart + 100) and not 
103            heart_is_beating):
104                print("heart beat!")
105                detected_heart_beat = True
106                heart_is_beating = True
107                heart_time_mark = ticks_ms()
108            elif ecg < thresh_heart:
109                heart_is_beating = False
110            #---------------偵測心跳結束---------------#
111            
112            #---------------偵測脈搏開始---------------#
113            if (ppg > (thresh_pulse + 20) and not 
114            pulse_is_beating):
115                led.value(1)
116                print("pulse beat!")
117                pulse_is_beating = True
118                pulse_time_mark = ticks_ms()
119                
120                if detected_heart_beat:
121                    pwtt = ticks_diff(pulse_time_mark, 
122                    heart_time_mark)
123                    print("pwtt =", pwtt)
124                    bp = cal_bp(pwtt)
125                    detected_heart_beat = False
126    
127                rr_intval = ticks_diff(ticks_ms(), 
128                pulse_time_mark)
129    
130                if 2000 > rr_intval > 270:
131                    tot_intval += rr_intval
132                    num_beats += 1
133                    if num_beats == 3:
134                        hr_rate = cal_hr_rate(tot_intval)
135                        tot_intval = 0
136                        num_beats = 0
137                else:
138                    tot_intval = 0
139                    num_beats = 0
140                
141            elif ppg < thresh_pulse:
142                led.value(0)
143                pulse_is_beating = False
144            #---------------偵測脈搏結束---------------#
145            max_ecg = 0