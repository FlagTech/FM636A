 1    import network, ESPWebServer
 2    from machine import SoftI2C, Pin, ADC
 3    from utime import ticks_ms, ticks_diff
 4    import _thread
 5    from max30102 import MAX30102
 6    from pulse_oximeter import Pulse_oximeter, IIR_filter
 7    
 8    
 9    led = Pin(5, Pin.OUT)
10    led.value(1)
11    
12    my_SCL_pin = 25         # I2C SCL 腳位
13    my_SDA_pin = 26         # I2C SDA 腳位
14    
15    i2c = SoftI2C(sda=Pin(my_SDA_pin),
16                  scl=Pin(my_SCL_pin))
17    
18    sensor = MAX30102(i2c=i2c)
19    sensor.setup_sensor()
20    
21    pox = Pulse_oximeter(sensor)
22    
23    dc_extractor = IIR_filter(0.99)    # 用於提取直流成份
24    thresh_generator = IIR_filter(0.9) # 用於產生動態閾值
25    
26    is_beating = False           # 紀錄是否正在跳動的旗標
27    beat_time_mark = ticks_ms()  # 紀錄心跳時間點
28    heart_rate = 0
29    num_beats = 0         # 紀錄心跳次數
30    target_n_beats = 3    # 設定要幾次心跳才更新一次心率
31    tot_intval = 0        # 紀錄心跳時間區間
32    ppg = 0
33    
34    def cal_heart_rate(intval, target_n_beats=3):
35        intval /= 1000
36        heart_rate = target_n_beats/(intval/60)
37        heart_rate = round(heart_rate, 1)
38        return heart_rate
39    
40    def SendHrRate(socket, args):    # 處理 /hr 指令的函式
41        ESPWebServer.ok(socket, "200", str(heart_rate))
42        
43    def SendEcg(socket, args):    # 處理 /line 指令的函式
44        ESPWebServer.ok(socket, "200", str(ppg))
45        
46    def web_thread():    # 處理網頁的子執行緒函式
47        while True:
48            ESPWebServer.handleClient()
49        
50    print("連接中...")
51    sta = network.WLAN(network.STA_IF)
52    sta.active(True)
53    sta.connect("無線網路名稱", "無線網路密碼")
54    
55    while not sta.isconnected():
56        pass
57    
58    print("已連接, ip為:", sta.ifconfig()[0])
59    
60    ESPWebServer.begin(80)                 # 啟用網站
61    ESPWebServer.onPath("/hr", SendHrRate) # 指定處理指令的函式
62    ESPWebServer.onPath("/line", SendEcg)  # 指定處理指令的函式
63    ESPWebServer.setDocPath("/")           # 指定 HTML 檔路徑
64    
65    _thread.start_new_thread(web_thread, ())   # 啟動子執行緒
66    
67    while True:         # 主執行緒
68        pox.update()    # 更新血氧模組
69        
70        if pox.available():
71            red_val = pox.get_raw_red()
72            red_dc = dc_extractor.step(red_val)
73            ppg = max(int(red_dc*1.01 - red_val), 0)
74            thresh = thresh_generator.step(ppg)
75            
76            if ppg > (thresh + 20) and not is_beating:
77                is_beating = True
78                led.value(0)
79                
80                intval = ticks_diff(ticks_ms(), beat_time_mark)
81                if 2000 > intval > 270:
82                    tot_intval += intval
83                    num_beats += 1
84                    if num_beats == target_n_beats:
85                        heart_rate = cal_heart_rate(
86                            tot_intval, target_n_beats)
87                        print(heart_rate)
88                        tot_intval = 0
89                        num_beats = 0
90                else:
91                    tot_intval = 0
92                    num_beats = 0
93                beat_time_mark = ticks_ms()
94            elif ppg < thresh:
95                is_beating = False
96                led.value(1)