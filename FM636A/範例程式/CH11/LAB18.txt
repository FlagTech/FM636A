 1    from machine import SoftI2C, Pin, I2C
 2    from max30102 import MAX30102
 3    from utime import ticks_ms, ticks_diff
 4    from pulse_oximeter import Pulse_oximeter, IIR_filter
 5    import ulab as np
 6    from keras_lite import Model
 7    
 8    # 增加神經網路的參數
 9    mean = 130.50358333333332 # 請改成訓練模型時的資料集平均數
10    std = 1514.8632605465837  # 請改成訓練模型時的資料集標準差
11    model = Model('ppg_model.json')  # 建立模型物件
12    label_name = [
13        'others', 'ppg'] # label名稱,要與建立模型時的順序一樣
14    
15    
16    led = Pin(5, Pin.OUT)
17    led.value(1)
18    
19    my_SCL_pin = 25         # I2C SCL 腳位
20    my_SDA_pin = 26         # I2C SDA 腳位
21    
22    i2c = SoftI2C(sda=Pin(my_SDA_pin),
23                  scl=Pin(my_SCL_pin))
24    
25    sensor = MAX30102(i2c=i2c)
26    sensor.setup_sensor()
27    
28    pox = Pulse_oximeter(sensor)
29    
30    thresh_generator = IIR_filter(0.9)  # 用於產生動態閾值
31    dc_extractor = IIR_filter(0.99)    # 用於提取直流成份
32    
33    is_beating = False
34    beat_time_mark = ticks_ms()
35    hr_rate = 0
36    num_beats = 0
37    target_n_beats = 3    # 設定要幾次心跳才更新一次心率
38    tot_intval = 0
39    
40    
41    def cal_heart_rate(intval, target_n_beats=3):
42        intval /= 1000
43        heart_rate = target_n_beats/(intval/60)
44        heart_rate = round(heart_rate, 1)
45        return heart_rate
46    
47    
48    def trim(data, length=300):
49        if len(data) > length:
50            data = data[:length]
51        else:
52            data = data + [0 for _ in range(length - len(data))]
53        return data
54    
55    
56    data = []
57    
58    while (True):
59        pox.update()
60    
61        if pox.available():
62            red_val = pox.get_raw_red()
63            red_dc = dc_extractor.step(red_val)
64            ppg = int(red_dc*1.01 - red_val)
65            data.append(ppg)
66            thresh = thresh_generator.step(ppg)
67    
68            if ppg > (thresh + 20) and not is_beating:
69                is_beating = True
70                led.value(0)
71    
72                rr_intval = ticks_diff(
73                    ticks_ms(), beat_time_mark)
74                if 2000 > rr_intval > 270:
75                    tot_intval += rr_intval
76                    num_beats += 1
77                    if num_beats == 3:
78                        data = trim(data)
79                        data = np.array([data])
80                        data = (data - mean)/std
81                        pred_class = model.predict_classes(
82                            data)
83                        label = label_name[pred_class[0]]
84                        print('類別:', label)
85                        if label == "ppg":
86                            heart_rate = cal_heart_rate(
87                                tot_intval, target_n_beats)
88                            print("心率:", heart_rate)
89                        tot_intval = 0
90                        num_beats = 0
91                        data = []
92                else:
93                    tot_intval = 0
94                    num_beats = 0
95                    data = []
96                beat_time_mark = ticks_ms()
97            elif ppg < thresh:
98                is_beating = False
99                led.value(1)